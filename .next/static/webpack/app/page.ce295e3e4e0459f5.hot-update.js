"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/EncryptedImage.tsx":
/*!***************************************!*\
  !*** ./components/EncryptedImage.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EncryptedImage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.5.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.5.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_crypto_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/crypto/parse */ \"(app-pages-browser)/./lib/crypto/parse.ts\");\n/* harmony import */ var _lib_crypto_decrypt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/crypto/decrypt */ \"(app-pages-browser)/./lib/crypto/decrypt.ts\");\n/* harmony import */ var _lib_image_render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/image/render */ \"(app-pages-browser)/./lib/image/render.ts\");\n/* harmony import */ var _lib_cache_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/cache/store */ \"(app-pages-browser)/./lib/cache/store.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction EncryptedImage(param) {\n    let { contentId, baseUrl, aesKey, className = \"\", alt = \"\", onLoad, onError, useCache = true } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EncryptedImage.useEffect\": ()=>{\n            let mounted = true;\n            let abortController = new AbortController();\n            let processingRef = {\n                current: false\n            };\n            const loadImage = {\n                \"EncryptedImage.useEffect.loadImage\": async ()=>{\n                    if (!canvasRef.current) return;\n                    // 이전 처리 중인 작업이 있다면 취소하고 새로 시작\n                    if (processingRef.current) {\n                        console.log('🔄 이전 작업 취소 후 새 작업 시작');\n                        abortController.abort();\n                        abortController = new AbortController();\n                    }\n                    processingRef.current = true;\n                    try {\n                        setLoading(true);\n                        setError(\"\");\n                        // Demo: 암호화 이미지가 없는 경우 플레이스홀더 표시\n                        if (contentId === \"sample\" || contentId === \"placeholder\") {\n                            // Canvas에 플레이스홀더 텍스트 렌더링\n                            const canvas = canvasRef.current;\n                            if (canvas) {\n                                const ctx = canvas.getContext(\"2d\");\n                                if (ctx) {\n                                    canvas.width = 500;\n                                    canvas.height = 350;\n                                    // 배경\n                                    ctx.fillStyle = \"#f9fafd\";\n                                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                                    // 테두리\n                                    ctx.strokeStyle = \"#e5e7eb\";\n                                    ctx.lineWidth = 2;\n                                    ctx.strokeRect(1, 1, canvas.width - 2, canvas.height - 2);\n                                    // 제목\n                                    ctx.fillStyle = \"#1f2937\";\n                                    ctx.font = \"bold 20px system-ui, -apple-system, sans-serif\";\n                                    ctx.textAlign = \"center\";\n                                    ctx.textBaseline = \"middle\";\n                                    ctx.fillText(\"🔒 AES-GCM-256 암호화 이미지\", canvas.width / 2, canvas.height / 2 - 50);\n                                    // 설명\n                                    ctx.fillStyle = \"#6b7280\";\n                                    ctx.font = \"14px system-ui, -apple-system, sans-serif\";\n                                    ctx.fillText(\"Canvas API + 복호화 렌더링 시뮬레이션\", canvas.width / 2, canvas.height / 2 - 10);\n                                    ctx.fillText(\"(데모용 - 실제 암호화 파일 없음)\", canvas.width / 2, canvas.height / 2 + 15);\n                                    // 안내문\n                                    ctx.fillStyle = \"#059669\";\n                                    ctx.font = \"bold 12px system-ui, -apple-system, sans-serif\";\n                                    ctx.fillText('💡 실제 암호화된 파일을 보려면 \"encrypted-demo.aeiw\"를 선택하세요', canvas.width / 2, canvas.height / 2 + 45);\n                                }\n                            }\n                            if (mounted) {\n                                setLoading(false);\n                                onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n                            }\n                            return;\n                        }\n                        // contentId가 실제 암호화 파일인지 확인 (간단한 체크)\n                        let imageUrl;\n                        if (contentId.includes(\"aeia\") || contentId.includes(\"aeiw\")) {\n                            // 이미 .aeia/.aeiw 확장자가 포함된 경우 그대로 사용\n                            imageUrl = contentId.startsWith(\"/\") ? contentId : \"/\".concat(contentId);\n                        } else {\n                            // contentId가 파일명만 있는 경우 확장자 추가\n                            const hasExtension = contentId.includes(\".\");\n                            if (hasExtension) {\n                                imageUrl = contentId.startsWith(\"/\") ? contentId : \"/\".concat(contentId);\n                            } else {\n                                // 확장자가 없으면 .aeiw 추가 (기본값)\n                                imageUrl = \"/\".concat(contentId, \".aeiw\");\n                            }\n                        }\n                        console.log(\"\\uD83D\\uDD0D 암호화 이미지 로드 시도:\", {\n                            contentId,\n                            baseUrl,\n                            imageUrl,\n                            useCache\n                        });\n                        let blob = null;\n                        // 캐시에서 먼저 시도\n                        if (useCache) {\n                            blob = await (0,_lib_cache_store__WEBPACK_IMPORTED_MODULE_5__.getEncryptedImage)(imageUrl);\n                        }\n                        // 캐시에 없으면 네트워크에서 가져오기\n                        if (!blob) {\n                            const response = await fetch(imageUrl, {\n                                signal: abortController.signal\n                            });\n                            if (!response.ok) {\n                                throw new Error(\"암호화된 이미지 로드 실패: \".concat(response.status, \" \").concat(response.statusText));\n                            }\n                            blob = await response.blob();\n                            // 캐시에 저장\n                            if (useCache) {\n                                await (0,_lib_cache_store__WEBPACK_IMPORTED_MODULE_5__.putEncryptedImage)(imageUrl, blob);\n                            }\n                        }\n                        if (!mounted) return;\n                        // 암호화된 이미지 처리\n                        await processEncryptedImage(blob);\n                        if (mounted) {\n                            setLoading(false);\n                            onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n                            // 복호화 성공 메시지 추가\n                            if (contentId.includes(\"encrypted-demo\")) {\n                                console.log(\"🎉 암호화된 데모 이미지 복호화 완료!\");\n                                console.log(\"📊 브라우저 개발자 도구에서 복호화 과정을 확인할 수 있습니다.\");\n                            }\n                        }\n                    } catch (err) {\n                        if (mounted && !abortController.signal.aborted) {\n                            const errorMessage = err instanceof Error && err.name === 'AbortError' ? \"요청이 취소되었습니다\" : err instanceof Error ? err.message : \"암호화된 이미지 로드 중 오류가 발생했습니다.\";\n                            console.warn('❌ EncryptedImage 로드 실패:', errorMessage);\n                            setError(errorMessage);\n                            setLoading(false);\n                            // AbortError가 아닌 경우만 상위로 에러 전파\n                            if (!(err instanceof Error && err.name === 'AbortError')) {\n                                onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n                            }\n                        }\n                    } finally{\n                        processingRef.current = false;\n                    }\n                }\n            }[\"EncryptedImage.useEffect.loadImage\"];\n            const processEncryptedImage = {\n                \"EncryptedImage.useEffect.processEncryptedImage\": async (blob)=>{\n                    const canvas = canvasRef.current;\n                    if (!canvas) return;\n                    // Blob을 ArrayBuffer로 변환\n                    const arrayBuffer = await blob.arrayBuffer();\n                    const bytes = new Uint8Array(arrayBuffer);\n                    // 파일 파싱 (파일명 전달)\n                    const parsed = (0,_lib_crypto_parse__WEBPACK_IMPORTED_MODULE_2__.parseAe)(bytes, contentId);\n                    // 헤드 부분 복호화 (1MB)\n                    const decryptedHead = await (0,_lib_crypto_decrypt__WEBPACK_IMPORTED_MODULE_3__.decryptHeadAESGCM)(aesKey, parsed.iv, parsed.cipher, parsed.tag);\n                    // 복호화된 헤드 + tail 재조립\n                    const fullImage = new Uint8Array(decryptedHead.length + parsed.tail.length);\n                    fullImage.set(decryptedHead, 0);\n                    fullImage.set(parsed.tail, decryptedHead.length);\n                    // Canvas에 렌더링 (개선된 방식)\n                    await (0,_lib_image_render__WEBPACK_IMPORTED_MODULE_4__.renderToCanvas)(canvas, fullImage, parsed.format);\n                }\n            }[\"EncryptedImage.useEffect.processEncryptedImage\"];\n            // 약간의 디바운싱과 초기 상태 설정\n            setLoading(true);\n            setError(\"\");\n            const timeoutId = setTimeout(loadImage, 100);\n            return ({\n                \"EncryptedImage.useEffect\": ()=>{\n                    mounted = false;\n                    abortController.abort();\n                    clearTimeout(timeoutId);\n                    processingRef.current = false;\n                    console.log('🧹 EncryptedImage 클린업 완료');\n                }\n            })[\"EncryptedImage.useEffect\"];\n        }\n    }[\"EncryptedImage.useEffect\"], [\n        contentId,\n        baseUrl,\n        aesKey,\n        useCache,\n        onLoad,\n        onError\n    ]);\n    if (error) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center bg-gray-200 text-gray-500 \".concat(className),\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                className: \"text-sm\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/dasollee/Downloads/GitAladin/FE_ImageServiceRequirements/components/EncryptedImage.tsx\",\n                lineNumber: 255,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/dasollee/Downloads/GitAladin/FE_ImageServiceRequirements/components/EncryptedImage.tsx\",\n            lineNumber: 252,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative \".concat(className),\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        },\n        children: [\n            loading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 rounded\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n                }, void 0, false, {\n                    fileName: \"/Users/dasollee/Downloads/GitAladin/FE_ImageServiceRequirements/components/EncryptedImage.tsx\",\n                    lineNumber: 273,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/dasollee/Downloads/GitAladin/FE_ImageServiceRequirements/components/EncryptedImage.tsx\",\n                lineNumber: 272,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                ref: canvasRef,\n                style: {\n                    display: loading ? \"none\" : \"block\",\n                    maxWidth: \"100%\",\n                    maxHeight: \"100%\",\n                    width: \"auto\",\n                    height: \"auto\",\n                    objectFit: \"contain\",\n                    borderRadius: \"8px\"\n                },\n                \"aria-label\": alt\n            }, void 0, false, {\n                fileName: \"/Users/dasollee/Downloads/GitAladin/FE_ImageServiceRequirements/components/EncryptedImage.tsx\",\n                lineNumber: 276,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dasollee/Downloads/GitAladin/FE_ImageServiceRequirements/components/EncryptedImage.tsx\",\n        lineNumber: 261,\n        columnNumber: 5\n    }, this);\n}\n_s(EncryptedImage, \"LEvUgE/Url3PQlIGmraHow/VGAM=\");\n_c = EncryptedImage;\nvar _c;\n$RefreshReg$(_c, \"EncryptedImage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/EncryptedImage.tsx\n"));

/***/ })

});