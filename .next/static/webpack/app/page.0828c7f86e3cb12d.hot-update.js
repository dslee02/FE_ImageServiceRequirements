"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/image/render.ts":
/*!*****************************!*\
  !*** ./lib/image/render.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createImageBitmapWithFallback: () => (/* binding */ createImageBitmapWithFallback),\n/* harmony export */   renderSuccessCanvas: () => (/* binding */ renderSuccessCanvas),\n/* harmony export */   renderToCanvas: () => (/* binding */ renderToCanvas)\n/* harmony export */ });\n/**\n * 이미지 렌더링 유틸리티\n * createImageBitmap을 사용하여 canvas에 이미지를 그립니다.\n * AVIF 실패 시 WebP로 fallback 처리\n */ async function renderToCanvas(canvas, fullBytes, format) {\n    console.log(\"Canvas 렌더링 시작 - 데이터 크기: \".concat(fullBytes.length, \" bytes, 포맷: \").concat(format));\n    const primaryMime = format === \"aeia\" ? \"image/avif\" : \"image/webp\";\n    const fallbackMime = format === \"aeia\" ? \"image/webp\" : \"image/avif\";\n    // 지원하는 이미지 형식 확인 (WebP, AVIF만 지원)\n    const hasRiffHeader = fullBytes[0] === 0x52 && fullBytes[1] === 0x49 && fullBytes[2] === 0x46 && fullBytes[3] === 0x46;\n    const hasWebpHeader = hasRiffHeader && fullBytes[8] === 0x57 && fullBytes[9] === 0x45 && fullBytes[10] === 0x42 && fullBytes[11] === 0x50;\n    const hasAvifHeader = fullBytes.slice(4, 8).every((byte, i)=>byte === [\n            0x66,\n            0x74,\n            0x79,\n            0x70\n        ][i]); // ftyp\n    const hasJpegHeader = fullBytes[0] === 0xFF && fullBytes[1] === 0xD8 && fullBytes[2] === 0xFF;\n    console.log(\"이미지 형식 확인: RIFF=\".concat(hasRiffHeader, \", WebP=\").concat(hasWebpHeader, \", AVIF=\").concat(hasAvifHeader, \", JPEG=\").concat(hasJpegHeader));\n    // JPEG 등 지원하지 않는 형식 체크\n    if (hasJpegHeader) {\n        console.log('❌ JPEG 형식은 지원하지 않습니다. WebP/AVIF만 지원합니다.');\n        renderUnsupportedFormatCanvas(canvas, 'JPEG');\n        return;\n    }\n    if (!hasWebpHeader && !hasAvifHeader) {\n        // 지원하는 이미지 형식이 아니면 텍스트로 표시\n        console.log('⚠️ 지원하지 않는 이미지 형식. WebP/AVIF만 지원됩니다.');\n        renderTextToCanvas(canvas, fullBytes);\n        return;\n    }\n    // 이미지 데이터 크기 검증 및 추출\n    let imageData;\n    if (hasWebpHeader) {\n        // RIFF 크기 필드에서 실제 WebP 크기 계산\n        const riffSize = (fullBytes[4] | fullBytes[5] << 8 | fullBytes[6] << 16 | fullBytes[7] << 24) + 8;\n        console.log(\"RIFF 크기 필드: \".concat(riffSize - 8, \", 전체 RIFF 크기: \").concat(riffSize, \" bytes, 전체 데이터: \").concat(fullBytes.length, \" bytes\"));\n        // 실제 WebP 파일 크기만큼만 추출\n        if (riffSize <= fullBytes.length) {\n            imageData = fullBytes.slice(0, riffSize);\n            console.log(\"추출된 WebP 데이터 크기: \".concat(imageData.length, \" bytes\"));\n        } else {\n            console.warn(\"RIFF 크기(\".concat(riffSize, \")가 전체 데이터(\").concat(fullBytes.length, \")보다 큼, 전체 데이터 사용\"));\n            imageData = fullBytes;\n        }\n    } else if (hasAvifHeader) {\n        // AVIF는 전체 데이터 사용\n        imageData = fullBytes;\n        console.log(\"AVIF 데이터 크기: \".concat(imageData.length, \" bytes\"));\n    } else {\n        imageData = fullBytes;\n    }\n    let bitmap = null;\n    try {\n        bitmap = await createImageBitmapWithFallback(imageData, format);\n        console.log(\"✅ 이미지 디코딩 성공\");\n    } catch (primaryError) {\n        console.warn(\"createImageBitmapWithFallback 실패, 고급 fallback 처리 시작:\", primaryError);\n        try {\n            // Fallback 1: Image 객체를 사용한 Base64 방식\n            bitmap = await tryImageObjectFallback(imageData, primaryMime);\n            console.log('✅ Image 객체 + Base64 방식 성공!');\n        } catch (imageObjectError) {\n            console.warn('Image 객체 방식 실패, Blob URL 방식 시도:', imageObjectError);\n            try {\n                // Fallback 2: Blob URL 방식\n                bitmap = await tryBlobUrlFallback(imageData, primaryMime, fallbackMime);\n                console.log('✅ Blob URL 방식 성공!');\n            } catch (blobUrlError) {\n                console.warn('Blob URL 방식 실패, 데이터 정리 후 재시도:', blobUrlError);\n                try {\n                    // Fallback 3: 데이터 정리 후 재시도\n                    bitmap = await tryCleanDataFallback(imageData, format);\n                    console.log('✅ 데이터 정리 후 재시도 성공!');\n                } catch (cleanDataError) {\n                    console.error('모든 이미지 디코딩 방식 실패, 성공 상태로 표시');\n                    console.log('디코딩 실패 상세:', {\n                        primaryError,\n                        imageObjectError,\n                        blobUrlError,\n                        cleanDataError\n                    });\n                    // 복호화는 성공했지만 이미지 렌더링 실패\n                    renderDecryptionSuccessButRenderFailed(canvas, fullBytes, format);\n                    return;\n                }\n            }\n        }\n    }\n    try {\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        console.log(\"Canvas 크기 설정: \".concat(canvas.width, \"x\").concat(canvas.height));\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Canvas 2D context를 가져올 수 없습니다.\");\n        }\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(bitmap, 0, 0);\n        console.log(\"✅ Canvas 렌더링 완료 - 크기: \".concat(canvas.width, \"x\").concat(canvas.height));\n    } catch (renderError) {\n        console.error('Canvas 렌더링 중 오류:', renderError);\n        throw renderError;\n    } finally{\n        try {\n            bitmap.close();\n        } catch (closeError) {\n            console.warn('bitmap.close() 실패:', closeError);\n        }\n    }\n}\nfunction renderTextToCanvas(canvas, fullBytes) {\n    canvas.width = 500;\n    canvas.height = 400;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    // 배경\n    ctx.fillStyle = '#f8f9fa';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // 테두리\n    ctx.strokeStyle = '#dee2e6';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(1, 1, canvas.width - 2, canvas.height - 2);\n    // 제목\n    ctx.fillStyle = '#28a745';\n    ctx.font = 'bold 18px system-ui, -apple-system, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('🎉 복호화 성공!', canvas.width / 2, 60);\n    // 식별 패턴 확인\n    const resultStr = new TextDecoder('utf-8', {\n        fatal: false\n    }).decode(fullBytes.slice(0, 2000));\n    ctx.fillStyle = '#6c757d';\n    ctx.font = '14px system-ui, -apple-system, sans-serif';\n    if (resultStr.includes('ENCRYPTED_DEMO_IMAGE_SUCCESS')) {\n        ctx.fillStyle = '#28a745';\n        ctx.fillText('✅ 식별 패턴 \"ENCRYPTED_DEMO_IMAGE_SUCCESS\" 발견', canvas.width / 2, 120);\n    }\n    const hasRiff = fullBytes[0] === 0x52 && fullBytes[1] === 0x49 && fullBytes[2] === 0x46 && fullBytes[3] === 0x46;\n    const hasWebp = hasRiff && fullBytes[8] === 0x57 && fullBytes[9] === 0x45 && fullBytes[10] === 0x42 && fullBytes[11] === 0x50;\n    if (hasRiff && hasWebp) {\n        ctx.fillStyle = '#17a2b8';\n        ctx.fillText('✅ 유효한 WebP 형식 헤더 확인됨', canvas.width / 2, 150);\n        const riffSize = (fullBytes[4] | fullBytes[5] << 8 | fullBytes[6] << 16 | fullBytes[7] << 24) + 8;\n        ctx.fillStyle = '#6c757d';\n        ctx.fillText(\"WebP 크기: \".concat(riffSize, \" bytes\"), canvas.width / 2, 175);\n    }\n    // 데이터 정보\n    ctx.fillStyle = '#6c757d';\n    ctx.font = '12px system-ui, -apple-system, sans-serif';\n    ctx.fillText(\"데이터 크기: \".concat(fullBytes.length.toLocaleString(), \" bytes\"), canvas.width / 2, 200);\n    ctx.fillText('복호화된 바이너리 데이터를 텍스트로 표시 중...', canvas.width / 2, 220);\n    // 샘플 데이터 표시\n    ctx.font = '10px monospace';\n    ctx.fillStyle = '#495057';\n    const sampleText = resultStr.slice(0, 100).replace(/[^\\x20-\\x7E]/g, '·');\n    const lines = [];\n    for(let i = 0; i < sampleText.length; i += 50){\n        lines.push(sampleText.slice(i, i + 50));\n    }\n    lines.forEach((line, index)=>{\n        ctx.fillText(line, canvas.width / 2, 260 + index * 15);\n    });\n    console.log('✅ 텍스트 모드 렌더링 완료');\n}\n/**\n * Image 객체를 사용한 fallback 처리\n */ async function tryImageObjectFallback(imageData, mimeType) {\n    return new Promise((resolve, reject)=>{\n        try {\n            const imageObj = new Image();\n            const canvas2d = document.createElement('canvas');\n            const ctx2d = canvas2d.getContext('2d');\n            if (!ctx2d) {\n                reject(new Error('Canvas 2D context 생성 실패'));\n                return;\n            }\n            // Base64 변환 (더 안전한 방식)\n            const base64 = btoa(Array.from(imageData, (byte)=>String.fromCharCode(byte)).join(''));\n            const dataUrl = \"data:\".concat(mimeType, \";base64,\").concat(base64);\n            console.log(\"\\uD83D\\uDD04 Image 객체 + Base64 방식 시도 (MIME: \".concat(mimeType, \")\"));\n            const timeout = setTimeout(()=>{\n                reject(new Error('Image 로드 타임아웃'));\n            }, 10000); // 10초 타임아웃\n            imageObj.onload = ()=>{\n                clearTimeout(timeout);\n                try {\n                    if (imageObj.naturalWidth === 0 || imageObj.naturalHeight === 0) {\n                        reject(new Error('이미지 크기가 0'));\n                        return;\n                    }\n                    canvas2d.width = imageObj.naturalWidth;\n                    canvas2d.height = imageObj.naturalHeight;\n                    ctx2d.drawImage(imageObj, 0, 0);\n                    // 임시 Canvas에서 ImageBitmap 생성\n                    createImageBitmap(canvas2d).then(resolve).catch(reject);\n                } catch (drawError) {\n                    reject(drawError);\n                }\n            };\n            imageObj.onerror = (error)=>{\n                clearTimeout(timeout);\n                reject(error);\n            };\n            imageObj.src = dataUrl;\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n/**\n * Blob URL을 사용한 fallback 처리\n */ async function tryBlobUrlFallback(imageData, primaryMime, fallbackMime) {\n    const mimes = [\n        primaryMime,\n        fallbackMime,\n        'image/*'\n    ];\n    for (const mime of mimes){\n        try {\n            console.log(\"\\uD83D\\uDD04 Blob URL 방식 시도 (MIME: \".concat(mime, \")\"));\n            const blob = new Blob([\n                imageData\n            ], {\n                type: mime\n            });\n            const url = URL.createObjectURL(blob);\n            try {\n                const imageObj = new Image();\n                const bitmap = await new Promise((resolve, reject)=>{\n                    const timeout = setTimeout(()=>{\n                        reject(new Error('Blob URL 이미지 로드 타임아웃'));\n                    }, 8000);\n                    imageObj.onload = ()=>{\n                        clearTimeout(timeout);\n                        if (imageObj.naturalWidth === 0 || imageObj.naturalHeight === 0) {\n                            reject(new Error('Blob URL 이미지 크기가 0'));\n                            return;\n                        }\n                        createImageBitmap(imageObj).then(resolve).catch(reject);\n                    };\n                    imageObj.onerror = (error)=>{\n                        clearTimeout(timeout);\n                        reject(error);\n                    };\n                    imageObj.src = url;\n                });\n                return bitmap;\n            } finally{\n                URL.revokeObjectURL(url);\n            }\n        } catch (error) {\n            console.warn(\"Blob URL 방식 (\".concat(mime, \") 실패:\"), error);\n        }\n    }\n    throw new Error('모든 MIME 타입으로 Blob URL 방식 실패');\n}\n/**\n * 데이터 정리 후 재시도하는 fallback 처리\n */ async function tryCleanDataFallback(imageData, format) {\n    console.log('🔄 데이터 정리 후 재시도');\n    // 1. 데이터 끝부분의 null 바이트 제거\n    let cleanData = imageData;\n    while(cleanData.length > 0 && cleanData[cleanData.length - 1] === 0){\n        cleanData = cleanData.slice(0, -1);\n    }\n    if (cleanData.length !== imageData.length) {\n        console.log(\"null 바이트 제거: \".concat(imageData.length, \" -> \").concat(cleanData.length, \" bytes\"));\n    }\n    // 2. WebP 헤더 재검증 및 크기 조정\n    if (format === \"aeiw\") {\n        const hasRiff = cleanData[0] === 0x52 && cleanData[1] === 0x49 && cleanData[2] === 0x46 && cleanData[3] === 0x46;\n        const hasWebp = hasRiff && cleanData[8] === 0x57 && cleanData[9] === 0x45 && cleanData[10] === 0x42 && cleanData[11] === 0x50;\n        if (hasRiff && hasWebp) {\n            const riffSize = (cleanData[4] | cleanData[5] << 8 | cleanData[6] << 16 | cleanData[7] << 24) + 8;\n            if (riffSize > 0 && riffSize <= cleanData.length) {\n                cleanData = cleanData.slice(0, riffSize);\n                console.log(\"WebP RIFF 크기 재조정: \".concat(cleanData.length, \" bytes\"));\n            }\n        }\n    }\n    // 3. 다시 createImageBitmap 시도\n    const mimeType = format === \"aeia\" ? \"image/avif\" : \"image/webp\";\n    const blob = new Blob([\n        cleanData\n    ], {\n        type: mimeType\n    });\n    try {\n        return await createImageBitmap(blob);\n    } catch (error) {\n        console.warn('정리된 데이터로 createImageBitmap 실패:', error);\n        // 4. 마지막으로 Image 객체 방식 재시도\n        return await tryImageObjectFallback(cleanData, mimeType);\n    }\n}\n/**\n * 복호화 성공했지만 이미지 렌더링 실패 시 표시\n */ function renderDecryptionSuccessButRenderFailed(canvas, fullBytes, format) {\n    canvas.width = 600;\n    canvas.height = 500;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    // 배경 (경고 색상)\n    ctx.fillStyle = '#fff8e1';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // 테두리\n    ctx.strokeStyle = '#f57c00';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(2, 2, canvas.width - 4, canvas.height - 4);\n    // 제목\n    ctx.fillStyle = '#e65100';\n    ctx.font = 'bold 22px system-ui, -apple-system, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('⚠️ 복호화 성공, 이미지 렌더링 실패', canvas.width / 2, 60);\n    // 부제목\n    ctx.fillStyle = '#ff8f00';\n    ctx.font = 'bold 16px system-ui, -apple-system, sans-serif';\n    ctx.fillText('🔓 AES-GCM 암호화 해독 완료', canvas.width / 2, 100);\n    ctx.fillStyle = '#d84315';\n    ctx.fillText('🖼️ 이미지 디코딩 실패 (모든 fallback 시도함)', canvas.width / 2, 125);\n    // 기술 정보\n    ctx.fillStyle = '#5d4037';\n    ctx.font = '14px system-ui, -apple-system, sans-serif';\n    ctx.fillText(\"파일 형식: \".concat(format, \" (\").concat(format === 'aeia' ? 'AVIF' : 'WebP', \")\"), canvas.width / 2, 160);\n    ctx.fillText(\"복호화된 데이터: \".concat(fullBytes.length.toLocaleString(), \" bytes\"), canvas.width / 2, 180);\n    // 시도한 방법들\n    ctx.fillStyle = '#6d4c41';\n    ctx.font = '13px system-ui, -apple-system, sans-serif';\n    ctx.fillText('시도한 렌더링 방법들:', canvas.width / 2, 220);\n    const methods = [\n        '1️⃣ createImageBitmap() 직접 호출',\n        '2️⃣ Image 객체 + Base64 data URL',\n        '3️⃣ Blob URL + Image 객체',\n        '4️⃣ 데이터 정리 후 재시도',\n        '5️⃣ 다중 MIME 타입 시도'\n    ];\n    methods.forEach((method, index)=>{\n        ctx.fillStyle = '#795548';\n        ctx.fillText(method, canvas.width / 2, 245 + index * 18);\n    });\n    // 가능한 원인\n    ctx.fillStyle = '#bf360c';\n    ctx.font = 'bold 14px system-ui, -apple-system, sans-serif';\n    ctx.fillText('가능한 원인:', canvas.width / 2, 360);\n    const causes = [\n        '• 브라우저가 해당 이미지 형식을 지원하지 않음',\n        '• 복호화된 이미지 데이터가 손상됨',\n        '• 파일 헤더나 메타데이터 오류'\n    ];\n    causes.forEach((cause, index)=>{\n        ctx.fillStyle = '#8d6e63';\n        ctx.font = '12px system-ui, -apple-system, sans-serif';\n        ctx.fillText(cause, canvas.width / 2, 385 + index * 16);\n    });\n    // 성공 표시\n    ctx.fillStyle = '#2e7d32';\n    ctx.font = 'bold 13px system-ui, -apple-system, sans-serif';\n    ctx.fillText('✅ 하지만 암호화 해독 자체는 성공적으로 완료되었습니다!', canvas.width / 2, 450);\n    console.log('✅ renderDecryptionSuccessButRenderFailed 렌더링 완료');\n}\n/**\n * 복호화 성공 시 Canvas에 성공 메시지 렌더링\n */ function renderSuccessCanvas(canvas, fullBytes) {\n    canvas.width = 500;\n    canvas.height = 400;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    // 배경\n    ctx.fillStyle = '#f8f9fa';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // 테두리\n    ctx.strokeStyle = '#28a745';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(1, 1, canvas.width - 2, canvas.height - 2);\n    // 제목\n    ctx.fillStyle = '#28a745';\n    ctx.font = 'bold 24px system-ui, -apple-system, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('🎉 AES-GCM 복호화 성공!', canvas.width / 2, 80);\n    // 부제목\n    ctx.fillStyle = '#17a2b8';\n    ctx.font = 'bold 16px system-ui, -apple-system, sans-serif';\n    ctx.fillText('✅ 암호화된 이미지가 성공적으로 복호화되었습니다', canvas.width / 2, 120);\n    // 데이터 정보\n    ctx.fillStyle = '#6c757d';\n    ctx.font = '14px system-ui, -apple-system, sans-serif';\n    ctx.fillText(\"복호화된 데이터 크기: \".concat(fullBytes.length.toLocaleString(), \" bytes\"), canvas.width / 2, 160);\n    // 헤더 검증 결과\n    const hasRiff = fullBytes[0] === 0x52 && fullBytes[1] === 0x49 && fullBytes[2] === 0x46 && fullBytes[3] === 0x46;\n    const hasWebp = hasRiff && fullBytes[8] === 0x57 && fullBytes[9] === 0x45 && fullBytes[10] === 0x42 && fullBytes[11] === 0x50;\n    if (hasRiff && hasWebp) {\n        ctx.fillStyle = '#28a745';\n        ctx.fillText('✅ 유효한 WebP 이미지 형식 확인', canvas.width / 2, 190);\n    } else {\n        ctx.fillStyle = '#ffc107';\n        ctx.fillText('⚠️ 이미지 형식 확인 불가 (바이너리 데이터)', canvas.width / 2, 190);\n    }\n    // 기술 정보\n    ctx.fillStyle = '#495057';\n    ctx.font = '12px system-ui, -apple-system, sans-serif';\n    ctx.fillText('• AES-GCM-256 알고리즘 사용', canvas.width / 2, 230);\n    ctx.fillText('• Canvas API를 통한 브라우저 렌더링', canvas.width / 2, 250);\n    ctx.fillText('• Next.js Client Component 환경', canvas.width / 2, 270);\n    // Blob URL 생성 안내\n    ctx.fillStyle = '#6f42c1';\n    ctx.font = 'bold 14px system-ui, -apple-system, sans-serif';\n    ctx.fillText('💡 아래에서 Blob URL로 변환된 이미지도 확인하세요!', canvas.width / 2, 310);\n    console.log('✅ renderSuccessCanvas 렌더링 완료');\n}\n/**\n * 지원하지 않는 이미지 형식에 대한 오류 메시지 렌더링\n */ function renderUnsupportedFormatCanvas(canvas, format) {\n    canvas.width = 500;\n    canvas.height = 400;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    // 배경\n    ctx.fillStyle = '#fff5f5';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // 테두리\n    ctx.strokeStyle = '#e53e3e';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(1, 1, canvas.width - 2, canvas.height - 2);\n    // 제목\n    ctx.fillStyle = '#e53e3e';\n    ctx.font = 'bold 24px system-ui, -apple-system, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('❌ 지원하지 않는 이미지 형식', canvas.width / 2, 80);\n    // 부제목\n    ctx.fillStyle = '#c53030';\n    ctx.font = 'bold 18px system-ui, -apple-system, sans-serif';\n    ctx.fillText(\"\".concat(format, \" 형식은 지원되지 않습니다\"), canvas.width / 2, 120);\n    // 지원 형식 안내\n    ctx.fillStyle = '#2d3748';\n    ctx.font = '16px system-ui, -apple-system, sans-serif';\n    ctx.fillText('지원하는 형식:', canvas.width / 2, 170);\n    ctx.fillStyle = '#38a169';\n    ctx.font = 'bold 18px system-ui, -apple-system, sans-serif';\n    ctx.fillText('✅ WebP (.webp)', canvas.width / 2, 200);\n    ctx.fillText('✅ AVIF (.avif)', canvas.width / 2, 230);\n    // 안내 메시지\n    ctx.fillStyle = '#4a5568';\n    ctx.font = '14px system-ui, -apple-system, sans-serif';\n    ctx.fillText('WebP 또는 AVIF 형식의 이미지를 사용해주세요.', canvas.width / 2, 280);\n    ctx.fillText('이 서비스는 차세대 이미지 포맷만 지원합니다.', canvas.width / 2, 300);\n    // 기술 정보\n    ctx.fillStyle = '#718096';\n    ctx.font = '12px system-ui, -apple-system, sans-serif';\n    ctx.fillText('• WebP: Google에서 개발한 고효율 이미지 포맷', canvas.width / 2, 340);\n    ctx.fillText('• AVIF: 차세대 이미지 표준 (더 높은 압축률)', canvas.width / 2, 360);\n    console.log(\"✅ \".concat(format, \" 형식 지원 안내 렌더링 완료\"));\n}\n/**\n * 이미지 비트맵 생성 with AVIF 우선, WebP fallback\n */ async function createImageBitmapWithFallback(bytes, _format) {\n    // 실제 이미지 데이터 크기 검증 및 추출\n    let imageData = bytes;\n    // WebP의 경우 RIFF 헤더 검증 후 실제 크기만 추출\n    const hasRiff = bytes[0] === 0x52 && bytes[1] === 0x49 && bytes[2] === 0x46 && bytes[3] === 0x46;\n    const hasWebp = hasRiff && bytes[8] === 0x57 && bytes[9] === 0x45 && bytes[10] === 0x42 && bytes[11] === 0x50;\n    if (hasRiff && hasWebp) {\n        const riffSize = (bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24) + 8;\n        if (riffSize <= bytes.length) {\n            imageData = bytes.slice(0, riffSize);\n            console.log(\"WebP 실제 데이터 크기: \".concat(imageData.length, \" bytes (RIFF: \").concat(riffSize, \")\"));\n        }\n    }\n    console.log(\"이미지 데이터 샘플 (hex): \".concat(Array.from(imageData.slice(0, 32)).map((b)=>b.toString(16).padStart(2, '0')).join(' ')));\n    let avifError;\n    // 1차 시도: AVIF로 디코딩\n    try {\n        console.log(\"\\uD83D\\uDD04 1차 시도: AVIF 형식으로 디코딩 (\".concat(imageData.length, \" bytes)\"));\n        const avifBlob = new Blob([\n            new Uint8Array(imageData)\n        ], {\n            type: \"image/avif\"\n        });\n        const bitmap = await createImageBitmap(avifBlob);\n        console.log(\"✅ AVIF 디코딩 성공\");\n        return bitmap;\n    } catch (error) {\n        avifError = error;\n        console.warn(\"AVIF 디코딩 실패:\", error);\n    }\n    // 2차 시도: WebP로 디코딩\n    try {\n        console.log(\"\\uD83D\\uDD04 2차 시도: WebP 형식으로 디코딩 (\".concat(imageData.length, \" bytes)\"));\n        const webpBlob = new Blob([\n            new Uint8Array(imageData)\n        ], {\n            type: \"image/webp\"\n        });\n        const bitmap = await createImageBitmap(webpBlob);\n        console.log(\"✅ WebP 디코딩 성공\");\n        return bitmap;\n    } catch (webpError) {\n        console.error(\"WebP 디코딩도 실패:\", webpError);\n        throw new Error(\"AVIF와 WebP 모두 디코딩 실패: AVIF(\".concat(avifError, \"), WebP(\").concat(webpError, \")\"));\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/image/render.ts\n"));

/***/ })

});